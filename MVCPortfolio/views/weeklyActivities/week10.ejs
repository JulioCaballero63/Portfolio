<%- include('../includes/head.ejs') %>

</head>

<body>
    <%- include('../includes/navigation.ejs') %>
    <main>
        <ul>
            <li>
                <h2><a href="/ta10">Team Activity</a></h2>
            </li>

            <!-- task one -->
            <li class="main-list__item">
                <h2>Reading Notes</h2>
                <div>
                    <h3>MDN: Validating forms | MDN: Using Fetch</h3>
                    <ul class="inner-content">

                        <li>
                            <h4>MDN: Validating forms</h4>
                            <p>
                                Before submitting data to the server, it is important to ensure all required form
                                controls are filled out, in the correct format. This is called client-side form
                                validation, and helps ensure data submitted matches the requirements set forth in the
                                various form controls. This article leads you through basic concepts and examples of
                                client-side form validation.
                            </p>
                            <p>Client-side validation is an initial check and an important feature of good user
                                experience; by catching invalid data on the client-side, the user can fix it straight
                                away. If it gets to the server and is then rejected, a noticeable delay is caused by a
                                round trip to the server and then back to the client-side to tell the user to fix their
                                data.</p>
                            <p>
                                However, client-side validation should not be considered an exhaustive security measure!
                                Your apps should always perform security checks on any form-submitted data on the
                                server-side as well as the client-side, because client-side validation is too easy to
                                bypass, so malicious users can still easily send bad data through to your server. Read
                                Website security for an idea of what could happen; implementing server-side validation
                                is somewhat beyond the scope of this module, but you should bear it in mind.
                            </p>
                            <p>There are two different types of client-side validation that you'll encounter on the web:

                                Built-in form validation uses HTML5 form validation features, which we've discussed in
                                many places throughout this module. This validation generally doesn't require much
                                JavaScript. Built-in form validation has better performance than JavaScript, but it is
                                not as customizable as JavaScript validation.
                                JavaScript validation is coded using JavaScript. This validation is completely
                                customizable, but you need to create it all (or use a library).
                            </p>
                        </li>
                        <li>
                            <h4>MDN: Using Fetch</h4>
                            <p>The Fetch API provides a JavaScript interface for accessing and manipulating parts of the
                                HTTP pipeline, such as requests and responses. It also provides a global fetch() method
                                that provides an easy, logical way to fetch resources asynchronously across the network.
                            </p>
                            <p>This kind of functionality was previously achieved using XMLHttpRequest. Fetch provides a
                                better alternative that can be easily used by other technologies such as Service
                                Workers. Fetch also provides a single logical place to define other HTTP-related
                                concepts such as CORS and extensions to HTTP.</p>
                            <p>The Promise returned from fetch() won't reject on HTTP error status even if the response
                                is an HTTP 404 or 500. Instead, as soon as the server responds with headers, the Promise
                                will resolve normally (with the ok property of the response set to false if the response
                                isn't in the range 200â€“299), and it will only reject on network failure or if anything
                                prevented the request from completing.</p>
                            <p>fetch() won't send cross-origin cookies unless you set the credentials init option.
                                (Since April 2018. The spec changed the default credentials policy to same-origin.</p>
                            <p>
                                A basic fetch request is really simple to set up. Have a look at the following code:
                                <code>
                                    fetch('http://example.com/movies.json')
                                    .then(response => response.json())
                                    .then(data => console.log(data));
                                </code>
                            </p>
                            <p>
                                The Response object, in turn, does not directly contain the actual JSON response body
                                but is instead a representation of the entire HTTP response. So, to extract the JSON
                                body content from the Response object, we use the json() method, which returns a second
                                promise that resolves with the result of parsing the response body text as JSON.
                            </p>
                        </li>
                    </ul>

                </div>
            </li>

            <!-- task 2 -->
            <li class="main-list__item">
                <h2>Completed Team Activity</h2>
                <div>
                    <h3>Notes:</h3>
                    <ul class="inner-content">
                        <li>
                            <h4>Core Requirements</h4>
                            <p>Were able to complete all of the core requirements.</p>
                        </li>

                        <li>
                            <h4>Stretch Goals</h4>
                            <p>Was not able to complete the stretch goals even with the help of the teachers code.</p>
                        </li>

                    </ul>
                </div>
            </li>

            <!-- task 4 -->
            <li class="main-list__item">
                <h2>Report</h2>
                <div>
                    <h3>Notes:</h3>
                    <ol class="inner-content">
                        <li>
                            <h4>What did I do since the last meeting?</h4>
                            <p>I met with my team and worked on the team activity.</p>
                        </li>

                        <li>
                            <h4>What am I going to do next?</h4>
                            <p>Continue to add content as needed every week.</p>
                            <p>Start on next week's reading and to be prepare for the meeting.</p>
                            <p>Continue working on my site to add templates.</p>
                        </li>

                        <li>
                            <h4>What are my blockers?</h4>
                            <p>Working on homework for several classes.</p>
                        </li>
                    </ol>
                </div>
            </li>
        </ul>
    </main>
    <%- include('../includes/end.ejs') %>